<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.amitesh</groupId>
    <artifactId>HexagonalArchitectureDemo</artifactId>
    <version>1.0-SNAPSHOT</version>
  </parent>

  <artifactId>adapter</artifactId>

  <dependencies>
    <!-- Adding dependency of core application module -->
    <dependency>
      <groupId>com.amitesh</groupId>
      <artifactId>application</artifactId>
      <version>${project.version}</version>
    </dependency>

    <!-- Jakarta RESTful Web Services is required to implement REST Adapters in absence of Spring boot -->
    <dependency>
      <groupId>jakarta.ws.rs</groupId>
      <artifactId>jakarta.ws.rs-api</artifactId>
      <version>${jakarta.ws.rs.api.version}</version>
    </dependency>

    <!-- Integration testing scope -->
    <!-- Allows to make HTTP calls from integration tests -->
    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <version>${rest.assured.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- A RESTEasy module for converting Java objects to JSON (and vice versa) -->
    <dependency>
      <groupId>org.jboss.resteasy</groupId>
      <artifactId>resteasy-jackson2-provider</artifactId>
      <version>${resteasy.jackson2.provider.version}</version>
    </dependency>

    <!-- To implement the JPA classes -->
    <dependency>
      <groupId>jakarta.persistence</groupId>
      <artifactId>jakarta.persistence-api</artifactId>
      <version>${jakarta.persistence.api.version}</version>
    </dependency>

    <!-- The Undertow web server combined with the RESTEasy library -->
    <dependency>
      <groupId>org.jboss.resteasy</groupId>
      <artifactId>resteasy-undertow</artifactId>
      <version>${resteasy.undertow.version}</version>
      <exclusions>
        <!-- Conflicts with io.smallrye:jandex, a dependency present in Hibernate Core too.
              This creates issue while creating Entity manager object for Jpa Repositories.
              Another way to solve the issue is to put this dependency at the end of the dependency list say after
        -->
        <exclusion>
          <groupId>org.jboss</groupId>
          <artifactId>jandex</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- For Integration testing of JPA Repository -->
    <dependency>
      <groupId>org.hibernate.orm</groupId>
      <artifactId>hibernate-core</artifactId>
      <version>${hibernate.core.version}</version>
    </dependency>

    <!-- Required by Hibernate at runtime -->
    <dependency>
      <groupId>org.hibernate.validator</groupId>
      <artifactId>hibernate-validator</artifactId>
      <version>${hibernate.validator.version}</version>
    </dependency>

    <!-- Required by Hibernate at runtime -->
    <dependency>
      <groupId>jakarta.el</groupId>
      <artifactId>jakarta.el-api</artifactId>
      <version>${jakarta.el.api.version}</version>
    </dependency>

    <!-- Required at runtime as a JDBC driver  -->
    <dependency>
      <groupId>com.mysql</groupId>
      <artifactId>mysql-connector-j</artifactId>
      <version>${mysql.connector.j.version}</version>
    </dependency>

    <!-- To launch a MySQL database from within the integration tests via Docker -->
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>mysql</artifactId>
      <version>${testcontainers.mysql.version}</version>
    </dependency>

    <!-- To use the "attached test JAR" from the "model" module -->
    <dependency>
      <groupId>com.amitesh</groupId>
      <artifactId>model</artifactId>
      <version>${project.version}</version>
      <classifier>tests</classifier>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <!-- To create an "attached test JAR" to be able to use this module's test classes in other modules -->
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>${maven.jar.plugin.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>test-jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>